/***************************************************************************
For the Third data2 Prefetching Championship - DPC3

Paper ID: #4
Instruction Pointer Classifying Prefetcher - IPCP

Authors: 
Samuel Pakalapati - samuelpakalapati@gmail.com
Biswabandan Panda - biswap@cse.iitk.ac.in
***************************************************************************/

#include "cache.h"
#include "triage.h"
#include <map>
#define MAX_ALLOWED_DEGREE 8

TriageConfig conf2[NUM_CPUS];
Triage data2[NUM_CPUS];
uint64_t last_address2[NUM_CPUS];

std::set<uint64_t>unique_addr2;
std::map<uint64_t, uint64_t> total_usage_count2;
std::map<uint64_t, uint64_t> actual_usage_count2;

#define NUM_IP_TABLE_L1_ENTRIES 1024                        // IP table entries 
#define NUM_GHB_ENTRIES 16                                  // Entries in the GHB
#define NUM_IP_INDEX_BITS 10                                // Bits to index into the IP table 
#define NUM_IP_TAG_BITS 6                                   // Tag bits per IP table entry
#define S_TYPE 1                                            // stream
#define CS_TYPE 2                                           // constant stride
#define CPLX_TYPE 3                                         // complex stride
#define NL_TYPE 4                                           // next line

// #define SIG_DEBUG_PRINT
#ifdef SIG_DEBUG_PRINT
#define SIG_DP(x) x
#else
#define SIG_DP(x)
#endif

class IP_TABLE_L1 {
  public:
    uint64_t ip_tag;
    uint64_t last_page;                                     // last page seen by IP
    uint64_t last_cl_offset;                                // last cl offset in the 4KB page
    int64_t last_stride;                                    // last delta observed
    uint16_t ip_valid;                                      // Valid IP or not   
    int conf2;                                               // CS conf2
    uint16_t signature;                                     // CPLX signature
    uint16_t str_dir;                                       // stream direction
    uint16_t str_valid;                                     // stream valid
    uint16_t str_strength;                                  // stream strength

    IP_TABLE_L1 () {
        ip_tag = 0;
        last_page = 0;
        last_cl_offset = 0;
        last_stride = 0;
        ip_valid = 0;
        signature = 0;
        conf2 = 0;
        str_dir = 0;
        str_valid = 0;
        str_strength = 0;
    };
};

class DELTA_PRED_TABLE {
public:
    int delta;
    int conf2;

    DELTA_PRED_TABLE () {
        delta = 0;
        conf2 = 0;
    };        
};


IP_TABLE_L1 trackers_l2[NUM_CPUS][NUM_IP_TABLE_L1_ENTRIES];
DELTA_PRED_TABLE DPT_l2[NUM_CPUS][4096];
uint64_t ghb_l2[NUM_CPUS][NUM_GHB_ENTRIES];
uint64_t prev_cpu_cycle2[NUM_CPUS];
uint64_t num_misses2[NUM_CPUS];
float mpkc2[NUM_CPUS] = {0};
int spec_nl2[NUM_CPUS] = {0};


/***************Updating the signature*************************************/ 
uint16_t update_sig_l2(uint16_t old_sig, int delta){                           
    uint16_t new_sig = 0;
    int sig_delta = 0;

// 7-bit sign magnitude form, since we need to track deltas from +63 to -63
    sig_delta = (delta < 0) ? (((-1) * delta) + (1 << 6)) : delta;
    new_sig = ((old_sig << 1) ^ sig_delta) & 0xFFF;                     // 12-bit signature

    return new_sig;
}



/****************Encoding the metadata***********************************/
uint32_t encode_metadata2(int stride, uint16_t type, int spec_nl2){

uint32_t metadata = 0;

// first encode stride in the last 8 bits of the metadata
if(stride > 0)
    metadata = stride;
else
    metadata = ((-1*stride) | 0b1000000);

// encode the type of IP in the next 4 bits
metadata = metadata | (type << 8);

// encode the speculative NL bit in the next 1 bit
metadata = metadata | (spec_nl2 << 12);

return metadata;

}


/*********************Checking for a global stream (GS class)***************/

void check_for_stream_l2(int index, uint64_t cl_addr, uint8_t cpu){
int pos_count=0, neg_count=0, count=0;
uint64_t check_addr = cl_addr;

// check for +ve stream
    for(int i=0; i<NUM_GHB_ENTRIES; i++){
        check_addr--;
        for(int j=0; j<NUM_GHB_ENTRIES; j++)
            if(check_addr == ghb_l2[cpu][j]){
                pos_count++;
                break;
            }
    }

check_addr = cl_addr;
// check for -ve stream
    for(int i=0; i<NUM_GHB_ENTRIES; i++){
        check_addr++;
        for(int j=0; j<NUM_GHB_ENTRIES; j++)
            if(check_addr == ghb_l2[cpu][j]){
                neg_count++;
                break;
            }
    }

    if(pos_count > neg_count){                                // stream direction is +ve
        trackers_l2[cpu][index].str_dir = 1;
        count = pos_count;
    }
    else{                                                     // stream direction is -ve
        trackers_l2[cpu][index].str_dir = 0;
        count = neg_count;
    }

if(count > NUM_GHB_ENTRIES/2){                                // stream is detected
    trackers_l2[cpu][index].str_valid = 1;
    if(count >= (NUM_GHB_ENTRIES*3)/4)                        // stream is classified as strong if more than 3/4th entries belong to stream
        trackers_l2[cpu][index].str_strength = 1;
}
else{
    if(trackers_l2[cpu][index].str_strength == 0)             // if identified as weak stream, we need to reset
        trackers_l2[cpu][index].str_valid = 0;
}

}

/**************************Updating confidence for the CS class****************/
int update_conf2(int stride, int pred_stride, int conf2){
    if(stride == pred_stride){             // use 2-bit saturating counter for confidence
        conf2++;
        if(conf2 > 3)
            conf2 = 3;
    } else {
        conf2--;
        if(conf2 < 0)
            conf2 = 0;
    }

return conf2;
}

void CACHE::l2c_prefetcher_initialize() 
{
        cout << NUM_CPUS << endl;
//    cpu = 0;
    conf2[cpu].lookahead = 1;
    conf2[cpu].degree = 1;
//    conf2[cpu].on_chip_size = 4096;
//    conf2[cpu].on_chip_size = 8192;
//    conf2[cpu].on_chip_size = 16384;  //64K
//    conf2[cpu].on_chip_set = 32768;  //128KB
    conf2[cpu].on_chip_size = 65536;  //256KB
//    conf2[cpu].on_chip_size = 131072; //512KB
//    conf2[cpu].on_chip_set = 262144; //1MB
//    conf2[cpu].on_chip_size = 524288;  //2MB
    conf2[cpu].on_chip_assoc = 8;
//    conf2[cpu].on_chip_assoc = 524288;
    conf2[cpu].training_unit_size = 10000000;
//    conf2[cpu].repl = TRIAGE_REPL_LRU;
    conf2[cpu].repl = TRIAGE_REPL_HAWKEYE;
//    conf2[cpu].repl = TRIAGE_REPL_PERFECT;
    conf2[cpu].use_dynamic_assoc = false;
//    conf2[cpu].use_dynamic_assoc = true;
    conf2[cpu].on_chip_assoc  = 8;
    data2[cpu].set_conf(&conf2[cpu]);

}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{

    uint64_t curr_page = addr >> LOG2_PAGE_SIZE;
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    uint64_t cl_offset = (addr >> LOG2_BLOCK_SIZE) & 0x3F;
    uint16_t signature = 0, last_signature = 0;
    int prefetch_degree = 0;
    int spec_nl_threshold = 0;
    int num_prefs = 0;
    uint32_t metadata=0;
    uint16_t ip_tag = (ip >> NUM_IP_INDEX_BITS) & ((1 << NUM_IP_TAG_BITS)-1);

if(NUM_CPUS == 1){
    prefetch_degree = 3;
    spec_nl_threshold = 15; 
} else {                                    // tightening the degree and mpkc2 constraints for multi-core
    prefetch_degree = 2;
    spec_nl_threshold = 5;
}

// update miss counter
if(cache_hit == 0)
    num_misses2[cpu] += 1;

// update spec nl bit when num misses crosses certain threshold
if(num_misses2[cpu] == 256){
    mpkc2[cpu] = ((float) num_misses2[cpu]/(current_core_cycle[cpu]-prev_cpu_cycle2[cpu]))*1000;
    prev_cpu_cycle2[cpu] = current_core_cycle[cpu];
    if(mpkc2[cpu] > spec_nl_threshold)
        spec_nl2[cpu] = 0;
    else
        spec_nl2[cpu] = 1;
    num_misses2[cpu] = 0;
}

// calculate the index bit
    int index = ip & ((1 << NUM_IP_INDEX_BITS)-1);
    if(trackers_l2[cpu][index].ip_tag != ip_tag){               // new/conflict IP
        if(trackers_l2[cpu][index].ip_valid == 0){              // if valid bit is zero, update with latest IP info
        trackers_l2[cpu][index].ip_tag = ip_tag;
        trackers_l2[cpu][index].last_page = curr_page;
        trackers_l2[cpu][index].last_cl_offset = cl_offset;
        trackers_l2[cpu][index].last_stride = 0;
        trackers_l2[cpu][index].signature = 0;
        trackers_l2[cpu][index].conf2 = 0;
        trackers_l2[cpu][index].str_valid = 0;
        trackers_l2[cpu][index].str_strength = 0;
        trackers_l2[cpu][index].str_dir = 0;
        trackers_l2[cpu][index].ip_valid = 1;
    } else {                                                    // otherwise, reset valid bit and leave the previous IP as it is
        trackers_l2[cpu][index].ip_valid = 0;
    }

    // issue a next line prefetch upon encountering new IP
        uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE; // BASE NL=1, changing it to 3
        metadata = encode_metadata2(1, NL_TYPE, spec_nl2[cpu]);
        prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
        return metadata_in;
    }
    else {                                                     // if same IP encountered, set valid bit
        trackers_l2[cpu][index].ip_valid = 1;
    }
    

    // calculate the stride between the current address and the last address
    int64_t stride = 0;
    if (cl_offset > trackers_l2[cpu][index].last_cl_offset)
        stride = cl_offset - trackers_l2[cpu][index].last_cl_offset;
    else {
        stride = trackers_l2[cpu][index].last_cl_offset - cl_offset;
        stride *= -1;
    }

    // don't do anything if same address is seen twice in a row
    if (stride == 0)
        return metadata_in;


// page boundary learning
if(curr_page != trackers_l2[cpu][index].last_page){
    if(stride < 0)
        stride += 64;
    else
        stride -= 64;
}

// update constant stride(CS) confidence
trackers_l2[cpu][index].conf2 = update_conf2(stride, trackers_l2[cpu][index].last_stride, trackers_l2[cpu][index].conf2);

// update CS only if confidence is zero
if(trackers_l2[cpu][index].conf2 == 0)                      
    trackers_l2[cpu][index].last_stride = stride;

last_signature = trackers_l2[cpu][index].signature;
// update complex stride(CPLX) confidence
DPT_l2[cpu][last_signature].conf2 = update_conf2(stride, DPT_l2[cpu][last_signature].delta, DPT_l2[cpu][last_signature].conf2);

// update CPLX only if confidence is zero
if(DPT_l2[cpu][last_signature].conf2 == 0)
    DPT_l2[cpu][last_signature].delta = stride;

// calculate and update new signature in IP table
signature = update_sig_l2(last_signature, stride);
trackers_l2[cpu][index].signature = signature;

// check GHB for stream IP
check_for_stream_l2(index, cl_addr, cpu);           

SIG_DP(
cout << ip << ", " << cache_hit << ", " << cl_addr << ", " << addr << ", " << stride << "; ";
cout << last_signature<< ", "  << DPT_l2[cpu][last_signature].delta<< ", "  << DPT_l2[cpu][last_signature].conf2 << "; ";
cout << trackers_l2[cpu][index].last_stride << ", " << stride << ", " << trackers_l2[cpu][index].conf2 << ", " << "; ";
);

    if(trackers_l2[cpu][index].str_valid == 1){                         // stream IP
        //cout << ip << ": GS IP " << endl;
        // for stream, prefetch with twice the usual degree
            prefetch_degree = prefetch_degree*2;
        for (int i=0; i<prefetch_degree; i++) {
            uint64_t pf_address = 0;

            if(trackers_l2[cpu][index].str_dir == 1){                   // +ve stream
                pf_address = (cl_addr + i + 1) << LOG2_BLOCK_SIZE;
                metadata = encode_metadata2(1, S_TYPE, spec_nl2[cpu]);    // stride is 1
            }
            else{                                                       // -ve stream
                pf_address = (cl_addr - i - 1) << LOG2_BLOCK_SIZE;
                metadata = encode_metadata2(-1, S_TYPE, spec_nl2[cpu]);   // stride is -1
            }

            // Check if prefetch address is in same 4 KB page
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)){
                break;
            }

            prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
            num_prefs++;
            SIG_DP(cout << "1, ");
            }

    } else if(trackers_l2[cpu][index].conf2 > 1 && trackers_l2[cpu][index].last_stride != 0){            // CS IP  
        //cout << ip << ": CS IP " << endl;
        for (int i=0; i<prefetch_degree; i++) {
            uint64_t pf_address = (cl_addr + (trackers_l2[cpu][index].last_stride*(i+1))) << LOG2_BLOCK_SIZE;

            // Check if prefetch address is in same 4 KB page
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)){
                break;
            }

            metadata = encode_metadata2(trackers_l2[cpu][index].last_stride, CS_TYPE, spec_nl2[cpu]);
            prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
            num_prefs++;
            SIG_DP(cout << trackers_l2[cpu][index].last_stride << ", ");
        }
    } 
    else 
    {
        //cout << ip << ": CPLX IP " << endl;
        //    cpu = 0;
        if (type != LOAD) 
        {
            return metadata_in;
        }

        //if (cache_hit) {
        //    return metadata_in;
        //}

        addr = (addr >> 6) << 6;
        if(addr == last_address2[cpu])
            return metadata_in;
        last_address2[cpu] = addr;
        unique_addr2.insert(addr);

        int i;
        uint64_t prefetch_addr_list[MAX_ALLOWED_DEGREE];
        for (i = 0; i < MAX_ALLOWED_DEGREE; ++i) 
        {
            prefetch_addr_list[i] = 0;
        }
        data2[cpu].calculatePrefetch(ip, addr, cache_hit, prefetch_addr_list,
                MAX_ALLOWED_DEGREE, cpu);

        int prefetched = 0;
        for (i = 0; i < MAX_ALLOWED_DEGREE; ++i) 
        {
            if (prefetch_addr_list[i] == 0) 
            {
                break;
            }
            PACKET test_packet;
            test_packet.address = prefetch_addr_list[i] >> LOG2_BLOCK_SIZE;
            test_packet.full_addr = prefetch_addr_list[i];
            bool llc_hit = static_cast<CACHE*>(lower_level)->check_hit(&test_packet) != -1;
            bool l2_hit = check_hit(&test_packet) != -1;
            //cout << "addr: " << addr << ", cache_hit: " << int(cache_hit) << ", llc_hit: " << llc_hit << endl;
            uint64_t md_in = addr;
            if(llc_hit)
                md_in = 0;
            ++total_usage_count2[addr];
            if (!l2_hit && !llc_hit)
            {
                ++actual_usage_count2[addr]; 
            }
            int ret = prefetch_line(ip, addr, prefetch_addr_list[i], FILL_L1, md_in);
            if(ret)
            {
    //           cout << hex << addr << " " << prefetch_addr_list[i] << dec << endl;
                prefetched++;
                if(prefetched >= conf2[cpu].degree)
                    break;
            }
        }
        // Set cache assoc if dynamic
        //cout << "LLC WAY: " << LLC_WAY << ", ASSOC: " << data2[cpu].get_assoc() << endl;
        unsigned total_assoc = 0;
        for (unsigned mycpu = 0; mycpu < NUM_CPUS; ++mycpu) {
            total_assoc += data2[mycpu].get_assoc();
        }
        total_assoc /= NUM_CPUS;
        // XXX: We only have everything in the same triage at the moment.
    //    total_assoc = data2[cpu].get_assoc();
        assert(total_assoc < LLC_WAY);
        if (conf2[cpu].repl != TRIAGE_REPL_PERFECT)
            static_cast<CACHE*>(lower_level)->current_assoc = LLC_WAY - total_assoc;
        //cout << total_assoc << " " << current_assoc << " " << data2[cpu].get_assoc() << endl;
    } 

SIG_DP(cout << endl);

// update the IP table entries
trackers_l2[cpu][index].last_cl_offset = cl_offset;
trackers_l2[cpu][index].last_page = curr_page;

// update GHB
// search for matching cl addr
int ghb_index=0;
for(ghb_index = 0; ghb_index < NUM_GHB_ENTRIES; ghb_index++)
    if(cl_addr == ghb_l2[cpu][ghb_index])
        break;
// only update the GHB upon finding a new cl address
if(ghb_index == NUM_GHB_ENTRIES){
for(ghb_index=NUM_GHB_ENTRIES-1; ghb_index>0; ghb_index--)
    ghb_l2[cpu][ghb_index] = ghb_l2[cpu][ghb_index-1];
ghb_l2[cpu][0] = cl_addr;
}

return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
return metadata_in;
}
void CACHE::l2c_prefetcher_final_stats()
{
cout << endl;
}

